//===-- AccaISelDAGToDAG.cpp - A dag to dag inst selector for Acca ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Acca target.
//
//===----------------------------------------------------------------------===//

#include "AccaTargetMachine.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "acca-isel"
#define PASS_NAME "Acca DAG->DAG Pattern Instruction Selection"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// AccaDAGToDAGISel - Acca specific code to select Acca machine
/// instructions for SelectionDAG operations.
///
namespace {
class AccaDAGToDAGISel : public SelectionDAGISel {
public:
  static char ID;

  AccaDAGToDAGISel() = delete;

  explicit AccaDAGToDAGISel(AccaTargetMachine &tm) : SelectionDAGISel(ID, tm) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;

  // Complex Pattern Selectors.
  bool SelectShiftedImm(SDValue N, SDValue &Base, SDValue &Shift);

  // Include the pieces autogenerated from the target description.
#include "AccaGenDAGISel.inc"
};
}  // end anonymous namespace

char AccaDAGToDAGISel::ID = 0;

INITIALIZE_PASS(AccaDAGToDAGISel, DEBUG_TYPE, PASS_NAME, false, false)

void AccaDAGToDAGISel::Select(SDNode *N) {
  SelectCode(N);
};

bool AccaDAGToDAGISel::SelectShiftedImm(SDValue N, SDValue &Base, SDValue &Shift) {
  llvm_unreachable("unimplemented");
};

/// createAccaISelDag - This pass converts a legalized DAG into a
/// Acca-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createAccaISelDag(AccaTargetMachine &TM) {
  return new AccaDAGToDAGISel(TM);
}
