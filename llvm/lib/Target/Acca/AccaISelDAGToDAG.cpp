//===-- AccaISelDAGToDAG.cpp - A dag to dag inst selector for Acca ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Acca target.
//
//===----------------------------------------------------------------------===//

#include "MCTargetDesc/AccaBaseInfo.h"
#include "AccaTargetMachine.h"
#include "llvm/ADT/SmallVector.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/SelectionDAGNodes.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
#include <cstdint>
using namespace llvm;

#define DEBUG_TYPE "acca-isel"
#define PASS_NAME "Acca DAG->DAG Pattern Instruction Selection"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// AccaDAGToDAGISel - Acca specific code to select Acca machine
/// instructions for SelectionDAG operations.
///
namespace {
class AccaDAGToDAGISel : public SelectionDAGISel {
public:
  static char ID;

  AccaDAGToDAGISel() = delete;

  explicit AccaDAGToDAGISel(AccaTargetMachine &tm) : SelectionDAGISel(ID, tm) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;

  bool SelectInlineAsmMemoryOperand(const SDValue &Op, unsigned ConstraintID,
                                    std::vector<SDValue> &OutOps) override;

  // Complex Pattern Selectors.
  bool SelectShiftedImm(SDValue N, SDValue &Base, SDValue &Shift);

  // Include the pieces autogenerated from the target description.
#include "AccaGenDAGISel.inc"
};
}  // end anonymous namespace

char AccaDAGToDAGISel::ID = 0;

INITIALIZE_PASS(AccaDAGToDAGISel, DEBUG_TYPE, PASS_NAME, false, false)

void AccaDAGToDAGISel::Select(SDNode *Node) {
  // If we have a custom node, we have already selected.
  if (Node->isMachineOpcode()) {
    Node->setNodeId(-1);
    return;
  }

  // Instruction Selection not handled by the auto-generated tablegen selection
  // should be handled here.
  unsigned Opcode = Node->getOpcode();
  SDLoc DL(Node);
  MVT VT = Node->getSimpleValueType(0);

  switch (Opcode) {
  default:
    break;
  case ISD::Constant: {
    int64_t Val = cast<ConstantSDNode>(Node)->getSExtValue();
    SDValue Imm = CurDAG->getTargetConstant(Val, DL, MVT::i64);
    unsigned Opcode = 0;
    if (VT == MVT::i64) {
      Opcode = Acca::PseudoLDI_word;
    } else if (VT == MVT::i32) {
      Opcode = Acca::PseudoLDI_quadbyte;
    } else if (VT == MVT::i16) {
      Opcode = Acca::PseudoLDI_doublebyte;
    } else if (VT == MVT::i8) {
      Opcode = Acca::PseudoLDI_byte;
    } else {
      llvm_unreachable("Unsupported constant type");
    }
    SDNode* Result = CurDAG->getMachineNode(Opcode, DL, VT, Imm);
    ReplaceNode(Node, Result);
    return;
  }
  case ISD::FrameIndex: {
    // select it to `add FI, 0, 0`, which will be lowered to `add rsp, imm, shift` later
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    const TargetLowering *TLI = getTargetLowering();
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, TLI->getPointerTy(CurDAG->getDataLayout()));
    SDLoc DL(Node);
    CurDAG->SelectNodeTo(Node, Acca::ADD_word_nonnull_imm_nocarry_nosetflags_arith, MVT::i64, TFI, CurDAG->getTargetConstant(0, DL, MVT::i32), CurDAG->getTargetConstant(0, DL, MVT::i32));
    return;
  }
  }

  SelectCode(Node);
};

bool AccaDAGToDAGISel::SelectShiftedImm(SDValue N, SDValue &Base, SDValue &Shift) {
  if (!isa<ConstantSDNode>(N.getNode()))
    return false;

  uint64_t Value = cast<ConstantSDNode>(N.getNode())->getZExtValue();
  uint16_t Imm;
  uint8_t ShiftFactorImm;

  if (!AccaUtil::asUnsignedShiftedImm11(Value, Imm, ShiftFactorImm))
    return false;

  SDLoc DL(N);
  Base = CurDAG->getTargetConstant(Imm, DL, MVT::i16);
  Shift = CurDAG->getTargetConstant(ShiftFactorImm, DL, MVT::i4);
  return true;
};

bool AccaDAGToDAGISel::
SelectInlineAsmMemoryOperand(const SDValue &Op, unsigned ConstraintID,
                             std::vector<SDValue> &OutOps) {
  OutOps.push_back(Op);
  return false;
};

/// createAccaISelDag - This pass converts a legalized DAG into a
/// Acca-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createAccaISelDag(AccaTargetMachine &TM) {
  return new AccaDAGToDAGISel(TM);
}
